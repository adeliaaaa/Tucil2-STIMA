ini bucket
[1[5.1 3.5] 2[4.9 3. ] 3[4.7 3.2] 4[4.6 3.1] 5[5.  3.6] 6[5.4 3.9] [4.6 3.4] 8[5.  3.4] [4.4 2.9] 10[4.9 3.1] [5.4 3.7] 12[4.8 3.4] [4.8 3. ] 14[4.3 3. ] [5.8 4. ] [5.7 4.4] [5.4 3.9] [5.1 3.5] [5.7 3.8] [5.1 3.8] [5.4 3.4] [5.1 3.7] [4.6 3.6] [5.1 3.3] [4.8 3.4] [5.  3. ] [5.  3.4] [5.2 3.5] [5.2 3.4] [4.7 3.2] [4.8 3.1] [5.4 3.4] [5.2 4.1] [5.5 4.2] [4.9 3.1] [5.  3.2] [5.5 3.5] [4.9 3.6] [4.4 3. ] [5.1 3.4] [5.  3.5] [4.5 2.3] [4.4 3.2] [5.  3.5] [5.1 3.8] [4.8 3. ] [5.1 3.8] [4.6 3.2] [5.3 3.7] [5.  3.3]]

ini hull.simplice
[[41 13] [36 41] [22 13] [22 32] [15 14] [15 32] [18 14] [18 36]]

ini bucket
[[7.  3.2] [6.4 3.2] [6.9 3.1] [5.5 2.3] [6.5 2.8] [5.7 2.8] [6.3 3.3] [4.9 2.4] [6.6 2.9] [5.2 2.7] [5.  2. ] [5.9 3. ] [6.  2.2] [6.1 2.9] [5.6 2.9] [6.7 3.1] [5.6 3. ] [5.8 2.7] [6.2 2.2] [5.6 2.5] [5.9 3.2] [6.1 2.8] [6.3 2.5] [6.1 2.8] [6.4 2.9] [6.6 3. ] [6.8 2.8] [6.7 3. ] [6.  2.9] [5.7 2.6] [5.5 2.4] [5.5 2.4] [5.8 2.7] [6.  2.7] [5.4 3. ] [6.  3.4] [6.7 3.1] [6.3 2.3] [5.6 3. ] [5.5 2.5] [5.5 2.6] [6.1 3. ] [5.8 2.6] [5.  2.3] [5.6 2.7] [5.7 3. ] [5.7 2.9] [6.2 2.9] [5.1 2.5] [5.7 2.8]]

ini hull.simplice
[[35  0] [34  7] [34 35] [10  7] [10 18] [26  0] [26 18]]

ini bucket
[1[6.3 3.3] [5.8 2.7] [7.1 3. ] 4[6.3 2.9] [6.5 3. ] 6[7.6 3. ] 7[4.9 2.5] 8[7.3 2.9] [6.7 2.5] [7.2 3.6] 11[6.5 3.2] 12[6.4 2.7] [6.8 3. ] 14[5.7 2.5] [5.8 2.8] 16[6.4 3.2] 
17[6.5 3. ] 18[7.7 3.8] 19[7.7 2.6] [6.  2.2] 21[6.9 3.2] [5.6 2.8] [7.7 2.8] 24[6.3 2.7] [6.7 3.3] [7.2 3.2] [6.2 2.8] 28[6.1 3. ] [6.4 2.8] 30[7.2 3. ] 31[7.4 2.8] [7.9 3.8] 
33[6.4 2.8] [6.3 2.8] [6.1 2.6] [7.7 3. ] 37[6.3 3.4] [6.4 3.1] [6.  3. ] 40[6.9 3.1] [6.7 3.1] 42[6.9 3.1] [5.8 2.7] [6.8 3.2] [6.7 3.3] 46[6.7 3. ] [6.3 2.5] 
48[6.5 3. ] [6.2 3.4] 50[5.9 3. ]]

ini hull.simplice
[[19  6] [18 31] [18 19] [48  6] [17 31] [17 48]]


ASLI
[[5.1 3.5] [4.9 3. ] [4.7 3.2] [4.6 3.1] [5.  3.6] [5.4 3.9] [4.6 3.4] [5.  3.4] [4.4 2.9] [4.9 3.1] [5.4 3.7] [4.8 3.4] [4.8 3. ] [4.3 3. ] [5.8 4. ] [5.7 4.4] [5.4 3.9] [5.1 3.5] [5.7 3.8] [5.1 3.8] [5.4 3.4] [5.1 3.7] [4.6 3.6] [5.1 3.3] [4.8 3.4] [5.  3. ] [5.  3.4] [5.2 3.5] [5.2 3.4] [4.7 3.2] [4.8 3.1] [5.4 3.4] [5.2 4.1] [5.5 4.2] [4.9 3.1] [5.  3.2] [5.5 3.5] [4.9 3.6] [4.4 3. ] [5.1 3.4] [5.  3.5] [4.5 2.3] [4.4 3.2] [5.  3.5] [5.1 3.8] [4.8 3. ] [5.1 3.8] [4.6 3.2] [5.3 3.7] [5.  3.3]]
KEURUT
[array([4.3, 3. ]), array([4.4, 2.9]), array([4.4, 3. ]), array([4.4, 3.2]), array([4.5, 2.3]), array([4.6, 3.1]), array([4.6, 3.2]), array([4.6, 3.4]), array([4.6, 3.6]), array([4.7, 3.2]), array([4.7, 3.2]), array([4.8, 3. ]), array([4.8, 3. ]), array([4.8, 3.1]), array([4.8, 3.4]), array([4.8, 3.4]), array([4.9, 3. ]), array([4.9, 3.1]), array([4.9, 3.1]), array([4.9, 3.6]), array([5., 3.]), array([5. , 3.2]), array([5. , 3.3]), array([5. , 3.4]), array([5. , 3.4]), array([5. , 3.5]), array([5. , 3.5]), array([5. , 3.6]), array([5.1, 3.3]), array([5.1, 3.4]), array([5.1, 3.5]), array([5.1, 3.5]), array([5.1, 3.7]), array([5.1, 3.8]), array([5.1, 3.8]), array([5.1, 3.8]), array([5.2, 3.4]), array([5.2, 3.5]), array([5.2, 4.1]), array([5.3, 3.7]), array([5.4, 3.4]), array([5.4, 3.4]), array([5.4, 3.7]), array([5.4, 3.9]), array([5.4, 3.9]), array([5.5, 3.5]), array([5.5, 4.2]), array([5.7, 3.8]), array([5.7, 4.4]), array([5.8, 4. ])]
ASLI
[[7.  3.2] [6.4 3.2] [6.9 3.1] [5.5 2.3] [6.5 2.8] [5.7 2.8] [6.3 3.3] [4.9 2.4] [6.6 2.9] [5.2 2.7] [5.  2. ] [5.9 3. ] [6.  2.2] [6.1 2.9] [5.6 2.9] [6.7 3.1] [5.6 3. ] [5.8 2.7] [6.2 2.2] [5.6 2.5] [5.9 3.2] [6.1 2.8] [6.3 2.5] [6.1 2.8] [6.4 2.9] [6.6 3. ] [6.8 2.8] [6.7 3. ] [6.  2.9] [5.7 2.6] [5.5 2.4] [5.5 2.4] [5.8 2.7] [6.  2.7] [5.4 3. ] [6.  3.4] [6.7 3.1] [6.3 2.3] [5.6 3. ] [5.5 2.5] [5.5 2.6] [6.1 3. ] [5.8 2.6] [5.  2.3] [5.6 2.7] [5.7 3. ] [5.7 2.9] [6.2 2.9] [5.1 2.5] [5.7 2.8]]
KEURUT
[array([4.9, 2.4]), array([5., 2.]), array([5. , 2.3]), array([5.1, 2.5]), array([5.2, 2.7]), array([5.4, 3. ]), array([5.5, 2.3]), array([5.5, 2.4]), array([5.5, 2.4]), array([5.5, 2.5]), array([5.5, 2.6]), array([5.6, 2.5]), array([5.6, 2.7]), array([5.6, 2.9]), array([5.6, 3. ]), array([5.6, 3. ]), array([5.7, 2.6]), array([5.7, 2.8]), array([5.7, 2.8]), array([5.7, 2.9]), array([5.7, 3. ]), array([5.8, 2.6]), array([5.8, 2.7]), array([5.8, 2.7]), array([5.9, 3. ]), array([5.9, 3.2]), array([6. , 2.2]), array([6. , 2.7]), array([6. , 2.9]), array([6. , 3.4]), array([6.1, 2.8]), array([6.1, 2.8]), array([6.1, 2.9]), array([6.1, 3. ]), array([6.2, 2.2]), array([6.2, 2.9]), array([6.3, 2.3]), array([6.3, 2.5]), array([6.3, 3.3]), array([6.4, 2.9]), array([6.4, 3.2]), array([6.5, 2.8]), array([6.6, 2.9]), array([6.6, 3. ]), array([6.7, 3. ]), array([6.7, 3.1]), array([6.7, 3.1]), array([6.8, 2.8]), array([6.9, 3.1]), array([7. , 3.2])]
ASLI
[[6.3 3.3]
 [5.8 2.7]
 [7.1 3. ]
 [6.3 2.9]
 [6.5 3. ]
 [7.6 3. ]
 [4.9 2.5]
 [7.3 2.9]
 [6.7 2.5]
 [7.2 3.6]
 [6.5 3.2]
 [6.4 2.7]
 [6.8 3. ]
 [5.7 2.5]
 [5.8 2.8]
 [6.4 3.2]
 [6.5 3. ]
 [7.7 3.8]
 [7.7 2.6]
 [6.  2.2]
 [6.9 3.2]
 [5.6 2.8]
 [7.7 2.8]
 [6.3 2.7]
 [6.7 3.3]
 [7.2 3.2]
 [6.2 2.8]
 [6.1 3. ]
 [6.4 2.8]
 [7.2 3. ]
 [7.4 2.8]
 [7.9 3.8]
 [6.4 2.8]
 [6.3 2.8]
 [6.1 2.6]
 [7.7 3. ]
 [6.3 3.4]
 [6.4 3.1]
 [6.  3. ]
 [6.9 3.1]
 [6.7 3.1]
 [6.9 3.1]
 [5.8 2.7]
 [6.8 3.2]
 [6.7 3.3]
 [6.7 3. ]
 [6.3 2.5]
 [6.5 3. ]
 [6.2 3.4]
 [5.9 3. ]]
KEURUT
[array([4.9, 2.5]), array([5.6, 2.8]), array([5.7, 2.5]), array([5.8, 2.7]), array([5.8, 2.7]), array([5.8, 2.8]), array([5.9, 3. ]), array([6. , 2.2]), array([6., 3.]), array([6.1, 2.6]), array([6.1, 3. ]), array([6.2, 2.8]), array([6.2, 3.4]), array([6.3, 2.5]), array([6.3, 2.7]), array([6.3, 2.8]), array([6.3, 2.9]), array([6.3, 3.3]), array([6.3, 3.4]), array([6.4, 2.7]), array([6.4, 2.8]), array([6.4, 2.8]), array([6.4, 3.1]), array([6.4, 3.2]), array([6.5, 3. ]), array([6.5, 3. ]), array([6.5, 3. ]), array([6.5, 3.2]), array([6.7, 2.5]), array([6.7, 3. ]), array([6.7, 3.1]), array([6.7, 3.3]), array([6.7, 3.3]), array([6.8, 3. ]), array([6.8, 3.2]), array([6.9, 3.1]), array([6.9, 3.1]), array([6.9, 3.2]), array([7.1, 3. ]), array([7.2, 3. ]), array([7.2, 3.2]), array([7.2, 3.6]), array([7.3, 2.9]), array([7.4, 2.8]), array([7.6, 3. ]), array([7.7, 2.6]), array([7.7, 2.8]), array([7.7, 3. ]), array([7.7, 3.8]), array([7.9, 3.8])]

import numpy as np

def ConvexHullMonic(bucket):
 
    solution = np.array([[0.0,0.0]])


    sort = sorted(bucket,key=lambda x:(x[0],x[1]))
    print(sort[0])
    print(sort[len(sort)-1])

    solution[0] = sort[0]
    solution = np.vstack((solution, sort[len(sort)-1]))
    
    print(solution)


    matriks = np.array([[solution[0,0], solution[0,1], 1], [solution[1,0], solution[1,1], 1], [0,0,1]])
    s1 = np.array([[1.0, 2.0]])
    s1 = np.delete(s1, 0, axis=0)

    s2 = np.array([[1.0, 2.0]])
    s2 = np.delete(s2, 0, axis=0)
    

    for i  in range (len(bucket)):
        if((bucket[i,0] != solution[0,0] and bucket[i,1] != solution[0,1]) or (bucket[i,0] != solution[1,0] and bucket[i,1] != solution[1,1])):
            matriks[2,0] = bucket[i,0]
            matriks[2,1] = bucket[i,1]
            d = np.linalg.det(matriks)
            if(d > 0):
                s1 = np.vstack((s1, bucket[i]))
            else:
                s2 = np.vstack((s2, bucket[i]))

    #solution = np.vstack((solution, findHull(s1, solution[0], solution[1])))     
    #solution = np.vstack((solution, findHull(s2, solution[1], solution[0])))     
    result = np.array([[1.0, 2.0]])
    result = np.delete(result, 0, axis=0)

    '''
    result = findHull(result, s1, solution[0], solution[1])
    print("si result")
    print(result)
    solutionEnd = np.concatenate((solution, result))
    result = findHull(result, s2, solution[1], solution[0])
    print("si result")
    print(result)

    solution = np.concatenate((solutionEnd, result))
    '''

    solution = np.append(solution, np.array(findHull(result, s1, solution[0], solution[1])), axis=0)
    solution = np.append(solution, np.array(findHull(result, s2, solution[1], solution[0])), axis=0)

    return solution


def findHull(solution, S,A,B):
    #print("Masuk sini---------------------------------")
    #print("A,B,solution")
    #print(A, B)

    #print("Masuk sini---------------------------------")
    if(S.size == 0):
        print('CEKTES---------------')
        return A
    else:
        # Find Orthogonally farthest point from AB
        fartest = S[0]
        tempDistance = 0.00
        for i in range (len(S)):
            sisiA = (((B[1] - A[1])**2) + ((B[0]-A[0])**2))**(1/2)
            sisiB = (((S[i,1] - A[1])**2) + ((S[i,0]-A[0])**2))**(1/2)
            sisiC = (((B[1] - S[i,1])**2) + ((B[0]-S[i,0])**2))**(1/2)
            setKel = (sisiA + sisiB + sisiC)/2
            jarak = (2/sisiA)*((setKel*(setKel-sisiA)*(setKel-sisiB)*(setKel-sisiC))**(1/2))

            if(jarak.any() > tempDistance):
                tempDistance = jarak
                fartest = S[i]

        solution = np.vstack((solution, fartest))

        #print("fARTESTNYA")
        #print(fartest)
        x1 = np.array([[1.0, 2.0]])
        x1 = np.delete(x1, 0, axis=0)

        x2 = np.array([[1.0, 2.0]])
        x2 = np.delete(x2, 0, axis=0) 

        for i  in range (len(S)):
            if (pointInTriangle(A[0], A[1], B[0], B[1], fartest[0], fartest[1], S[i,0], S[i,1]) == False) :
                if(fartest[0] > S[i,0]):
                    x1 = np.vstack((x1, S[i]))
                else:
                    x2 = np.vstack((x2, S[i]))

        #solution = np.vstack((solution, findHull(x1, A, fartest)))     
        #solution = np.vstack((solution, findHull(x1,fartest,B)))  

        #solution = np.append(solution, np.array(findHull(solution, x1, A, fartest)), axis=0)
        #solution = np.append(solution, np.array(findHull(solution, x2,fartest,B)), axis=0)
        findHull(solution, x1, A, fartest)

        findHull(solution, x2,fartest,B)

        return solution


'''
Algorithm ConvexHull(P)
// P is a set of input points

Sort all the points in P and find two extreme points A and B
S1 ← Set of points right to the line AB  
S2 ← Set of points right to the line BA 
Solution ← AB followed by BA 

Call FindHull(S1, A, B)
Call FindHull(S2, B, A)
---------
Algorithm FindHull(P, A, B)

if isEmpty(P) then
  return
else
  C ← Orthogonally farthest point from AB
  Solution ← Replace AB by AC followed by CB 
  Partition P – { C } in X0, X1 and X2
  Discard X0 in side triangle

  Call FindHull(X1, A, C)
  Call FindHull(X2, C, B)
end
'''

def pointInTriangle(x1, y1, x2, y2, x3, y3, x, y):

    denominator = ((y2 - y3)*(x1 - x3) + (x3 - x2)*(y1 - y3))
    a = ((y2 - y3)*(x - x3) + (x3 - x2)*(y - y3)) / denominator
    b = ((y3 - y1)*(x - x3) + (x1 - x3)*(y - y3)) / denominator
    c = 1 - a - b
 
    return 0 <= a and a <= 1 and 0 <= b and b <= 1 and 0 <= c and c <= 1
